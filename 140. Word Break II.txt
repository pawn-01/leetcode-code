class Solution {
public:
    vector<string> solve(string& s, unordered_map<string,bool>& mp, int i, unordered_map<int,vector<string>>& dp){
        if(i==s.size()) return dp[i]={"true"};
         
        if(dp.find(i)!=dp.end()) return dp[i];
        string r = "";
        vector<string> vec;
        for(int k = i ; k<s.size() ; k++){
            r += s[k];
            if(mp.find(r)!=mp.end()){
            vector<string> a = solve(s,mp,k+1,dp);
            if(a.size()!=0){
                for(auto x : a){
                   if(x!="true"){
                      vec.push_back(r+" "+x);
                   } 
                   else{
                       vec.push_back(r);
                   }
                }
             }
           }
        }
        return dp[i]=vec;
    }
    vector<string> wordBreak(string s, vector<string>& w) {
         unordered_map<int,vector<string>> dp;
         unordered_map<string,bool> mp;
         
         for(int i = 0 ; i<w.size() ; i++){
              if(mp.find(w[i])==mp.end()) mp[w[i]] = true;
         }
        return solve(s,mp,0,dp);
    }
};