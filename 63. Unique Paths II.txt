class Solution {
public:
    int solve(vector<vector<int>>& oGrid, int i , int j,vector<vector<int>>& dp){
        int m = oGrid.size();
        int n = oGrid[0].size();
        if(i==m-1 and j==n-1){
            return dp[i][j]=1;
        }
        int op = 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(j+1<n and oGrid[i][j+1]!=1){
            op += solve(oGrid,i,j+1,dp);
        }
        if(i+1<m and oGrid[i+1][j]!=1){
            op += solve(oGrid,i+1,j,dp);
        }
        return dp[i][j]=op;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& oGrid) {
         if(oGrid[0][0]==1){
             return 0;
         }
         vector<vector<int>> dp(101,vector<int>(101,-1));
         return solve(oGrid,0,0,dp);
    }
};