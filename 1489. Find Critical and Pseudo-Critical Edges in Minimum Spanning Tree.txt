class dsu{
    public:
     vector<int> parent;
     vector<int> rank;
    dsu(int n){
       parent.resize(n,0);
       rank.resize(n,0);
       for(int i = 0 ; i<n ; i++){
           parent[i] = i;
       }
    }
    int par(int i){
        if(parent[i]==i) return i;
        return parent[i] = par(parent[i]);
    }
    void un(int x , int y){
        int px = parent[x];
        int py = parent[y];
        if(rank[px]>rank[py]) parent[py] = px;
        else if(rank[py]>rank[px]) parent[px] = py;
        else{
           parent[py] = px;
           rank[px]++;
        }
    }
};
static bool comp(vector<int>&e1 , vector<int>&e2){
     return e1[2]<e2[2];
}
int MST(int n , vector<vector<int>>& edges, int include , int exclude){
     dsu d(n);
     int weight = 0; 
     if(include!=-1){
         int x = edges[include][0];
         int y = edges[include][1];
         weight += edges[include][2];
        if(d.par(x)!=d.par(y)) d.un(x,y);
     }
     
    for(int i = 0 ; i<edges.size() ; i++){
        if(i==exclude) continue;
        int x = edges[i][0];
        int y = edges[i][1];
        if(d.par(x)!=d.par(y)){
            d.un(x,y);
            weight += edges[i][2];
        }
    }
     for(int i = 0 ; i < n ; i++){
            if(d.par(i) != d.par(0)){
                return INT_MAX;
            }
        }
    
    return weight;
}
class Solution {
public:
    vector<vector<int>> findCriticalAndPseudoCriticalEdges(int n, vector<vector<int>>& edges) {
        //to determine index 
        for(int i = 0 ; i<edges.size() ; i++){
            edges[i].push_back(i);
        }
        //kruskal algo
        sort(edges.begin(),edges.end(),comp);
        int mst = MST(n,edges,-1,-1);
         
        //vector for critical and pseudo 
        vector<int> cri , pse;
        for(int i = 0 ; i<edges.size(); i++){
            if(MST(n,edges,-1,i)>mst){
                cri.push_back(edges[i][3]);
            }
            else{
                if(MST(n,edges,i,-1)==mst){
                    pse.push_back(edges[i][3]);
                }
            }
        }
        return {cri,pse};
    }
};