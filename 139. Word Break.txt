class Solution {
public:
    bool solve(string& s, unordered_map<string,bool>& mp, int i,vector<int>& dp){
        if(i==s.size()){
            return dp[i]=true;
        }
        if(dp[i]!=-1) return dp[i];
        string r = "";
        for(int k = i ; k<s.size() ; k++){ 
             r += s[k];
            if(mp.find(r)!=mp.end()){
             if(solve(s,mp,k+1,dp)) return dp[i]=true;
          }
        }
        return dp[i]=false;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
         unordered_map<string,bool> mp;
         for(int i = 0 ; i<wordDict.size() ; i++){
              if(mp.find(wordDict[i])==mp.end()){
                  mp[wordDict[i]] = true;
              }
         }
         vector<int> dp(s.size()+1,-1);
         return solve(s,mp,0,dp);
    }
};