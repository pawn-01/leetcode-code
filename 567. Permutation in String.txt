class Solution {
public:
    bool checkInclusion(string s1, string s2) {
         int n = s1.size();
         unordered_map<char,int> mp1,mp2;
         for(int i = 0 ; i<s1.size(); i++){
             mp1[s1[i]]++;
         }
         int i = 0;
         int j = 0;
         while(j<s2.size()){
             mp2[s2[j]]++;
             if(j-i+1==n){
                 cout<<(mp1==mp2)<<endl;
                 if(mp1==mp2) return true;
                 else{
                     mp2[s2[i]]--;
                     if(mp2[s2[i]]==0){
                         mp2.erase(s2[i]);
                     }
                     i++;
                 }
             }
             j++;
         }
        return false;
    }
};

/*n = s2.size()
  m = s1.size()
time complexity: o(n)
space complexity: o(2*m)
*/